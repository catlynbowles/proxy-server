/*!
 * name: @jswork/next-param
 * description: Parse and stringify URL query strings for next.
 * homepage: https://js.work
 * version: 1.0.11
 * date: 2023-04-21 08:47:22
 * license: MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = void 0;
var _next = _interopRequireDefault(require('@jswork/next'));
var _jsBase = require('js-base64');
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var ENCODE_HOOKS = {
  uri: function uri(v) {
    return encodeURIComponent(v);
  },
  uri2: function uri2(v) {
    return encodeURIComponent(encodeURIComponent(v));
  },
  base64: function base64(v) {
    return _jsBase.Base64.encode(v);
  }
};
var defaults = {
  separator: ',',
  encode: 'uri',
  isEmpty: function isEmpty(value) {
    return value == null;
  },
  transform: _next['default'].noop
};
_next['default'].param = function (inObj, inUrl, inOptions) {
  if (!inObj && !inUrl) return '';
  if (!inObj && inUrl) return inUrl;
  var options = _next['default'].mix(null, defaults, inOptions);
  var arr = [];
  var result;
  _next['default'].forIn(inObj, function (key, value) {
    if (!options.isEmpty(value)) {
      var encoder = ENCODE_HOOKS[options.encode] || options.encode;
      var isAry = Array.isArray(value);
      var joined = isAry ? value.map(encoder).join(options.separator) : value;
      var hasTransform = options.transform !== _next['default'].noop;
      var suffix = isAry ? joined : encoder(joined);
      var transformed = hasTransform ? options.transform(key, joined) : key + '=' + suffix;
      arr.push(transformed);
    }
  });
  result = arr.join('&');
  if (!inUrl) return result;
  if (!result) return inUrl;
  if (inUrl.includes('?')) return inUrl + '&' + result;
  return inUrl + '?' + result;
};
if (typeof module !== 'undefined' && module.exports) {
  module.exports = _next['default'].param;
}
var _default = _next['default'].param;
exports['default'] = _default;
