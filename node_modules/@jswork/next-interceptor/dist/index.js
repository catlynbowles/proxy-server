/*!
 * name: @jswork/next-interceptor
 * description: Interceptor for next.
 * homepage: https://js.work
 * version: 1.0.11
 * date: 2023-04-21 11:35:55
 * license: MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = void 0;
var _next = _interopRequireDefault(require('@jswork/next'));
require('@jswork/next-promise-compose');
require('@jswork/next-pipe');
require('@jswork/next-filter-map');
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var defaults = {
  async: false,
  items: []
};
var NxInterceptor = _next['default'].declare('nx.Interceptor', {
  methods: {
    init: function init(inOptions) {
      this.options = _next['default'].mix(null, defaults, inOptions);
      this.activeItems = [];
    },
    applyItems: function applyItems(inWhen) {
      var entities = this.options.items;
      var filterType =
        typeof inWhen === 'function'
          ? inWhen
          : function (item) {
              if (!inWhen) return item;
              return item.type === inWhen;
            };
      var filterDisabled = function filterDisabled(item) {
        return !item.disabled;
      };
      this.activeItems = _next['default'].filterMap(entities, function (item) {
        return [filterDisabled(item) && filterType(item), item.fn];
      });
    },
    compose: function compose(inPayload, inWhen) {
      var composer = this.options.async ? _next['default'].promiseCompose : _next['default'].pipe;
      this.applyItems(inWhen);
      return composer.apply(null, this.activeItems)(inPayload);
    }
  }
});
if (typeof module !== 'undefined' && module.exports) {
  module.exports = NxInterceptor;
}
var _default = NxInterceptor;
exports['default'] = _default;
