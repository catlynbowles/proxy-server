/*!
 * name: @jswork/next-abstract-request
 * description: Standard abstract request.
 * homepage: https://js.work
 * version: 1.0.36
 * date: 2023-05-11 09:56:45
 * license: MIT
 */

'use strict';

function _typeof(obj) {
  '@babel/helpers - typeof';
  return (
    (_typeof =
      'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
        ? function (obj) {
            return typeof obj;
          }
        : function (obj) {
            return obj &&
              'function' == typeof Symbol &&
              obj.constructor === Symbol &&
              obj !== Symbol.prototype
              ? 'symbol'
              : typeof obj;
          }),
    _typeof(obj)
  );
}
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = void 0;
var _next = _interopRequireDefault(require('@jswork/next'));
require('@jswork/next-stub-singleton');
require('@jswork/next-parse-request-args');
require('@jswork/next-interceptor');
require('@jswork/next-abstract-request');
require('@jswork/next-content-type');
require('@jswork/next-data-transform');
var _excluded = ['slim', 'dataType', 'transformRequest', 'transformResponse', 'transformError'];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly &&
      (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })),
      keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2
      ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        })
      : Object.getOwnPropertyDescriptors
      ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
      : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, 'string');
  return _typeof(key) === 'symbol' ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== 'object' || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || 'default');
    if (_typeof(res) !== 'object') return res;
    throw new TypeError('@@toPrimitive must return a primitive value.');
  }
  return (hint === 'string' ? String : Number)(input);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var MSG_IMPL = 'Must be implement.';
var GET_STYLE_ACTION = ['get', 'delete', 'head', 'options'];
var isGetStyle = function isGetStyle(inMethod) {
  return GET_STYLE_ACTION.includes(inMethod);
};
var defaults = {
  slim: false,
  dataType: 'json',
  responseType: 'json',
  interceptors: [],
  transformRequest: _next['default'].stubValue,
  transformResponse: _next['default'].stubValue,
  transformError: _next['default'].stubValue
};
var NxAbstractRequest = _next['default'].declare('nx.AbstractRequest', {
  statics: _next['default'].mix(null, _next['default'].stubSingleton()),
  methods: {
    init: function init(inOptions) {
      this.opts = _next['default'].mix(null, defaults, this.defaults(), inOptions);
      this.interceptor = new _next['default'].Interceptor({
        items: this.opts.interceptors
      });
      this.initClient();
    },
    initClient: function initClient() {
      this.httpRequest = null;
      _next['default'].error(MSG_IMPL);
    },
    defaults: function defaults() {
      return null;
    },
    request: function request(inMethod, inUrl, inData, inOptions) {
      // transformRequest, transformResponse only use once
      var _this$opts$inOptions = _objectSpread(_objectSpread({}, this.opts), inOptions),
        slim = _this$opts$inOptions.slim,
        dataType = _this$opts$inOptions.dataType,
        transformRequest = _this$opts$inOptions.transformRequest,
        transformResponse = _this$opts$inOptions.transformResponse,
        transformError = _this$opts$inOptions.transformError,
        options = _objectWithoutProperties(_this$opts$inOptions, _excluded);
      var interceptor = this.interceptor;
      var contentType = _next['default'].contentType(dataType);
      var headers =
        dataType && contentType
          ? {
              'Content-Type': contentType
            }
          : {};
      var data = _next['default'].DataTransform.transform(dataType, inData);
      var payload = isGetStyle(inMethod)
        ? {
            params: inData
          }
        : {
            data: data
          };

      // compose request:
      var requestConfig = _objectSpread(
        _objectSpread(
          {
            url: inUrl,
            method: inMethod,
            headers: headers
          },
          payload
        ),
        options
      );
      var requestTransformConfig = transformRequest(requestConfig);
      var requestComposeConfig = interceptor.compose(requestTransformConfig, 'request');
      return this.httpRequest(requestComposeConfig)
        .then(function (res) {
          var compose4response = _objectSpread(
            {
              config: requestComposeConfig
            },
            res
          );
          var composedResponse = interceptor.compose(compose4response, 'response');
          var result = transformResponse(composedResponse);
          var hasTransform = transformResponse !== _next['default'].stubValue;
          if (hasTransform) return result;
          var status = result.status,
            data = result.data;
          return slim
            ? {
                status: status,
                data: data
              }
            : result;
        })
        ['catch'](function (err) {
          // compose error:
          var errorComposeConfig = interceptor.compose(err, 'error');
          return transformError(errorComposeConfig);
        });
    },
    'get,post,put,patch,delete,head,options': function getPostPutPatchDeleteHeadOptions(inMethod) {
      return function () {
        var inputArgs = [inMethod].concat(_next['default'].slice(arguments));
        var args = _next['default'].parseRequestArgs(inputArgs, true);
        return this.request.apply(this, args);
      };
    }
  }
});
if (typeof module !== 'undefined' && module.exports) {
  module.exports = NxAbstractRequest;
}
var _default = NxAbstractRequest;
exports['default'] = _default;
