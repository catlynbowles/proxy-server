"use strict";
/*!
 * name: @jswork/enhanced-fetch
 * description: Enhanced-fetch is a utility library that enriches the built-in fetch API with features such as support for response types, timeouts, and destroyable requests.
 * homepage: https://js.work
 * version: 1.0.22
 * date: 2023-04-20 22:43:58
 * license: MIT
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var next_1 = __importDefault(require("@jswork/next"));
require("@jswork/next-apply-fetch-middleware");
require("@jswork/fetch");
// import middlewares
var middlewares_1 = require("./middlewares");
// default value
var defaults = {
    timeout: 0,
    debug: false,
    destroyable: false,
    responseType: 'json'
};
var enhancedFetch = function (inUrl, inInit) {
    var options = __assign(__assign({}, defaults), inInit);
    var enhanced = next_1.default.applyFetchMiddleware([
        // Must be in first: because override promise method.
        middlewares_1.middlewareDebug,
        middlewares_1.middlewareDestroy,
        middlewares_1.middlewareResponseType,
        middlewares_1.middlewareTimeout,
    ])(fetch);
    return enhanced(inUrl, options);
};
// for commonjs es5 require
if (typeof module !== 'undefined' && module.exports) {
    module.exports = enhancedFetch;
}
exports.default = enhancedFetch;
