"use strict";
/*!
 * name: @jswork/enhanced-fetch
 * description: Enhanced-fetch is a utility library that enriches the built-in fetch API with features such as support for response types, timeouts, and destroyable requests.
 * homepage: https://js.work
 * version: 1.0.22
 * date: 2023-04-20 22:43:58
 * license: MIT
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.middlewareTimeout = void 0;
var defaults = { timeout: 0 };
var middlewareTimeout = function (inFetch) { return function (inUrl, inInit) {
    var _a = __assign(__assign({}, defaults), inInit), timeout = _a.timeout, options = __rest(_a, ["timeout"]);
    if (timeout <= 0)
        return inFetch(inUrl, options);
    var controller = new AbortController();
    var signal = controller.signal;
    // set timeout timer.
    var timeoutId = setTimeout(function () {
        controller.abort();
    }, timeout);
    return inFetch(inUrl, __assign({ signal: signal }, options))
        .then(function (response) {
        clearTimeout(timeoutId);
        return response;
    })
        .catch(function (error) {
        var isAbortErr = error.name === 'AbortError';
        throw isAbortErr ? new Error('Timeout') : error;
    });
}; };
exports.middlewareTimeout = middlewareTimeout;
