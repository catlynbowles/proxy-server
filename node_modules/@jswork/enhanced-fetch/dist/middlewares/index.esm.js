var l={debug:!1},f=e=>(o,s)=>{let{debug:n,...t}={...l,...s};if(!n)return e(o,t);let r={url:o,...t};return console.log(`
 :::::::::DEBUG::::::::: 
`),console.log(r),e(o,t)};var a={destroyable:!1},x=e=>(o,s)=>{let{destroyable:n,...t}={...a,...s};if(!n)return e(o,t);let r=new AbortController,d=r.signal,u=e(o,{signal:d,...t});return u.destroy=()=>{r.abort()},u};var m={responseType:"json",slim:!1},T=e=>(o,s)=>{let{responseType:n,...t}={...m,...s};return n?e(o,t).then(r=>{let{ok:d,status:u}=r;return r[d?n:"text"]().then(i=>({status:u,data:i,original:r}))}):e(o,t)};var p={timeout:0},M=e=>(o,s)=>{let{timeout:n,...t}={...p,...s};if(n<=0)return e(o,t);let r=new AbortController,{signal:d}=r,u=setTimeout(()=>{r.abort()},n);return e(o,{signal:d,...t}).then(c=>(clearTimeout(u),c)).catch(c=>{throw c.name==="AbortError"?new Error("Timeout"):c})};export{f as middlewareDebug,x as middlewareDestroy,T as middlewareResponseType,M as middlewareTimeout};
//# sourceMappingURL=index.js.map
