"use strict";
/*!
 * name: @jswork/enhanced-fetch
 * description: Enhanced-fetch is a utility library that enriches the built-in fetch API with features such as support for response types, timeouts, and destroyable requests.
 * homepage: https://js.work
 * version: 1.0.22
 * date: 2023-04-20 22:43:58
 * license: MIT
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.middlewareResponseType = void 0;
var defaults = { responseType: 'json', slim: false };
var middlewareResponseType = function (inFetch) { return function (inUrl, inInit) {
    var _a = __assign(__assign({}, defaults), inInit), responseType = _a.responseType, options = __rest(_a, ["responseType"]);
    if (!responseType)
        return inFetch(inUrl, options);
    return inFetch(inUrl, options).then(function (original) {
        var ok = original.ok, status = original.status;
        var resType = ok ? responseType : 'text';
        return original[resType]().then(function (data) {
            return { status: status, data: data, original: original };
        });
    });
}; };
exports.middlewareResponseType = middlewareResponseType;
