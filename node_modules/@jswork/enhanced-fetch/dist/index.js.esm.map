{
  "version": 3,
  "sources": ["src/index.ts", "src/middlewares/debug.ts", "src/middlewares/destroyable.ts", "src/middlewares/response-type.ts", "src/middlewares/timeout.ts"],
  "sourcesContent": ["import nx from '@jswork/next';\nimport { EnhancedRequestInit, FetchFn } from './types';\nimport '@jswork/next-apply-fetch-middleware';\nimport '@jswork/fetch';\n\n// import middlewares\nimport {\n  middlewareResponseType,\n  middlewareTimeout,\n  middlewareDestroy,\n  middlewareDebug,\n} from './middlewares';\n\n// default value\nconst defaults: EnhancedRequestInit = {\n  timeout: 0,\n  debug: false,\n  destroyable: false,\n  responseType: 'json'\n};\n\nconst enhancedFetch: FetchFn = (inUrl, inInit?) => {\n  const options = { ...defaults, ...inInit };\n  const enhanced = nx.applyFetchMiddleware([\n    // Must be in first: because override promise method.\n    middlewareDebug,\n    middlewareDestroy,\n    middlewareResponseType,\n    middlewareTimeout,\n  ])(fetch);\n\n  return enhanced(inUrl, options);\n};\n\n// for commonjs es5 require\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = enhancedFetch;\n}\n\nexport default enhancedFetch;\n", "import { MiddleWareFunction } from '../types';\n\nconst defaults = { debug: false };\n\nexport const middlewareDebug: MiddleWareFunction = (inFetch) => (inUrl, inInit?) => {\n  const { debug, ...options } = { ...defaults, ...inInit };\n  if (!debug) return inFetch(inUrl, options);\n  const opts = { url: inUrl, ...options };\n  console.log('\\n :::::::::DEBUG::::::::: \\n');\n  console.log(opts);\n  return inFetch(inUrl, options);\n};\n", "import { MiddleWareFunction } from '../types';\n\nconst defaults = { destroyable: false };\n\nexport const middlewareDestroy: MiddleWareFunction = (inFetch) => (inUrl, inInit?) => {\n  const { destroyable, ...options } = { ...defaults, ...inInit };\n  if (!destroyable) return inFetch(inUrl, options);\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  const promise = inFetch(inUrl, { signal, ...options });\n\n  promise.destroy = () => {\n    controller.abort();\n  };\n\n  return promise;\n};\n", "import { MiddleWareFunction } from '../types';\n\nconst defaults = { responseType: 'json', slim: false };\n\nexport const middlewareResponseType: MiddleWareFunction = (inFetch) => (inUrl, inInit?) => {\n  const { responseType, ...options } = { ...defaults, ...inInit };\n  if (!responseType) return inFetch(inUrl, options);\n  return inFetch(inUrl, options).then((original) => {\n    const { ok, status } = original;\n    const resType = ok ? responseType : 'text';\n    return original[resType]().then((data) => {\n      return { status, data, original };\n    });\n  });\n};\n", "import { MiddleWareFunction } from '../types';\n\nconst defaults = { timeout: 0 };\n\nexport const middlewareTimeout: MiddleWareFunction = (inFetch) => (inUrl, inInit?) => {\n  const { timeout, ...options } = { ...defaults, ...inInit };\n  if (timeout <= 0) return inFetch(inUrl, options);\n  const controller = new AbortController();\n  const { signal } = controller;\n\n  // set timeout timer.\n  const timeoutId = setTimeout(() => {\n    controller.abort();\n  }, timeout);\n\n  return inFetch(inUrl, { signal, ...options })\n    .then((response) => {\n      clearTimeout(timeoutId);\n      return response;\n    })\n    .catch((error) => {\n      const isAbortErr = error.name === 'AbortError';\n      throw isAbortErr ? new Error('Timeout') : error;\n    });\n};\n"],
  "mappings": "AAAA,OAAOA,MAAQ,eAEf,MAAO,sCACP,MAAO,gBCDP,IAAMC,EAAW,CAAE,MAAO,EAAM,EAEnBC,EAAuCC,GAAY,CAACC,EAAOC,IAAY,CAClF,GAAM,CAAE,MAAAC,EAAO,GAAGC,CAAQ,EAAI,CAAE,GAAGN,EAAU,GAAGI,CAAO,EACvD,GAAI,CAACC,EAAO,OAAOH,EAAQC,EAAOG,CAAO,EACzC,IAAMC,EAAO,CAAE,IAAKJ,EAAO,GAAGG,CAAQ,EACtC,eAAQ,IAAI;AAAA;AAAA,CAA+B,EAC3C,QAAQ,IAAIC,CAAI,EACTL,EAAQC,EAAOG,CAAO,CAC/B,ECTA,IAAME,EAAW,CAAE,YAAa,EAAM,EAEzBC,EAAyCC,GAAY,CAACC,EAAOC,IAAY,CACpF,GAAM,CAAE,YAAAC,EAAa,GAAGC,CAAQ,EAAI,CAAE,GAAGN,EAAU,GAAGI,CAAO,EAC7D,GAAI,CAACC,EAAa,OAAOH,EAAQC,EAAOG,CAAO,EAE/C,IAAMC,EAAa,IAAI,gBACjBC,EAASD,EAAW,OACpBE,EAAUP,EAAQC,EAAO,CAAE,OAAAK,EAAQ,GAAGF,CAAQ,CAAC,EAErD,OAAAG,EAAQ,QAAU,IAAM,CACtBF,EAAW,MAAM,CACnB,EAEOE,CACT,ECfA,IAAMC,EAAW,CAAE,aAAc,OAAQ,KAAM,EAAM,EAExCC,EAA8CC,GAAY,CAACC,EAAOC,IAAY,CACzF,GAAM,CAAE,aAAAC,EAAc,GAAGC,CAAQ,EAAI,CAAE,GAAGN,EAAU,GAAGI,CAAO,EAC9D,OAAKC,EACEH,EAAQC,EAAOG,CAAO,EAAE,KAAMC,GAAa,CAChD,GAAM,CAAE,GAAAC,EAAI,OAAAC,CAAO,EAAIF,EAEvB,OAAOA,EADSC,EAAKH,EAAe,MACb,EAAE,EAAE,KAAMK,IACxB,CAAE,OAAAD,EAAQ,KAAAC,EAAM,SAAAH,CAAS,EACjC,CACH,CAAC,EAPyBL,EAAQC,EAAOG,CAAO,CAQlD,ECZA,IAAMK,EAAW,CAAE,QAAS,CAAE,EAEjBC,EAAyCC,GAAY,CAACC,EAAOC,IAAY,CACpF,GAAM,CAAE,QAAAC,EAAS,GAAGC,CAAQ,EAAI,CAAE,GAAGN,EAAU,GAAGI,CAAO,EACzD,GAAIC,GAAW,EAAG,OAAOH,EAAQC,EAAOG,CAAO,EAC/C,IAAMC,EAAa,IAAI,gBACjB,CAAE,OAAAC,CAAO,EAAID,EAGbE,EAAY,WAAW,IAAM,CACjCF,EAAW,MAAM,CACnB,EAAGF,CAAO,EAEV,OAAOH,EAAQC,EAAO,CAAE,OAAAK,EAAQ,GAAGF,CAAQ,CAAC,EACzC,KAAMI,IACL,aAAaD,CAAS,EACfC,EACR,EACA,MAAOC,GAAU,CAEhB,MADmBA,EAAM,OAAS,aACf,IAAI,MAAM,SAAS,EAAIA,CAC5C,CAAC,CACL,EJVA,IAAMC,EAAgC,CACpC,QAAS,EACT,MAAO,GACP,YAAa,GACb,aAAc,MAChB,EAEMC,EAAyB,CAACC,EAAOC,IAAY,CACjD,IAAMC,EAAU,CAAE,GAAGJ,EAAU,GAAGG,CAAO,EASzC,OARiBE,EAAG,qBAAqB,CAEvCC,EACAC,EACAC,EACAC,CACF,CAAC,EAAE,KAAK,EAEQP,EAAOE,CAAO,CAChC,EAGI,OAAO,OAAW,KAAe,OAAO,UAC1C,OAAO,QAAUH,GAGnB,IAAOS,EAAQT",
  "names": ["nx", "defaults", "middlewareDebug", "inFetch", "inUrl", "inInit", "debug", "options", "opts", "defaults", "middlewareDestroy", "inFetch", "inUrl", "inInit", "destroyable", "options", "controller", "signal", "promise", "defaults", "middlewareResponseType", "inFetch", "inUrl", "inInit", "responseType", "options", "original", "ok", "status", "data", "defaults", "middlewareTimeout", "inFetch", "inUrl", "inInit", "timeout", "options", "controller", "signal", "timeoutId", "response", "error", "defaults", "enhancedFetch", "inUrl", "inInit", "options", "nx", "middlewareDebug", "middlewareDestroy", "middlewareResponseType", "middlewareTimeout", "src_default"]
}
